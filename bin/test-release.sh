#!/bin/bash

# Test script to validate release script functionality
# This script tests the helper functions without actually creating a release

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Source helper functions
source "$SCRIPT_DIR/lib/general-functions.sh"
source "$SCRIPT_DIR/lib/git-functions.sh"
source "$SCRIPT_DIR/lib/wp-functions.sh"

# Change to project root
cd "$PROJECT_ROOT"

echo "üß™ Testing release script functionality..."
echo ""

# Test 1: Check if we can read package.json version
echo "üì¶ Testing package.json version reading..."
if command -v jq >/dev/null 2>&1; then
    VERSION=$(get_version_package_json)
    echo "‚úÖ Current version: $VERSION"
else
    echo "‚ùå jq not found - required for JSON processing"
fi
echo ""

# Test 2: Check package manager detection
echo "üîß Testing package manager detection..."
PACKAGE_MANAGER=$(get_package_manager_for_project)
echo "‚úÖ Detected package manager: $PACKAGE_MANAGER"
echo ""

# Test 3: Check if this is a WordPress plugin
echo "üîç Testing WordPress plugin detection..."
if is_wp_plugin_dir; then
    echo "‚úÖ This is a WordPress plugin directory"
else
    echo "‚ÑπÔ∏è  This is not in a WordPress plugin directory"
fi
echo ""

# Test 4: Check for block plugin indicators
echo "üß± Testing block plugin detection..."
if is_wp_block_plugin; then
    echo "‚úÖ This appears to be a block plugin"
else
    echo "‚ÑπÔ∏è  This does not appear to be a block plugin"
fi
echo ""

# Test 5: Check for debugging code
echo "üîç Testing debugging code detection..."
if wp_check_debugging_code; then
    echo "‚úÖ No debugging code found"
else
    echo "‚ö†Ô∏è  Debugging code detected"
fi
echo ""

# Test 6: Check for release asset configuration
echo "üì¶ Testing release asset configuration..."
if wp_plugin_has_release_asset; then
    echo "‚úÖ Plugin is configured for release assets"
else
    echo "‚ÑπÔ∏è  Plugin is not configured for release assets"
fi
echo ""

# Test 7: Check for production/build scripts
echo "üî® Testing build script detection..."
if current_dir_has_npm_production_script; then
    echo "‚úÖ Production script found"
elif current_dir_has_npm_build_script; then
    echo "‚úÖ Build script found"
else
    echo "‚ÑπÔ∏è  No production or build script found"
fi
echo ""

# Test 8: Check changelog
echo "üìù Testing changelog detection..."
if changelog_exists; then
    echo "‚úÖ CHANGELOG.md found"
else
    echo "‚ÑπÔ∏è  No CHANGELOG.md found"
fi
echo ""

# Test 9: Check git repository
echo "üìÇ Testing git repository..."
if is_git_repo; then
    echo "‚úÖ This is a git repository"
    CURRENT_BRANCH=$(get_current_branch)
    echo "   Current branch: $CURRENT_BRANCH"

    if is_working_directory_clean; then
        echo "‚úÖ Working directory is clean"
    else
        echo "‚ö†Ô∏è  Working directory has uncommitted changes"
    fi
else
    echo "‚ùå This is not a git repository"
fi
echo ""

# Test 10: Check GitHub CLI
echo "üêô Testing GitHub CLI..."
if check_gh_cli; then
    echo "‚úÖ GitHub CLI is installed and authenticated"
else
    echo "‚ùå GitHub CLI is not available or not authenticated"
fi
echo ""

# Test 11: Check WP-CLI
echo "üîß Testing WP-CLI..."
if command -v wp >/dev/null 2>&1; then
    echo "‚úÖ WP-CLI is available"
else
    echo "‚ÑπÔ∏è  WP-CLI not found (optional for POT file updates)"
fi
echo ""

# Test 12: Version calculation
echo "üî¢ Testing version calculation..."
if command -v jq >/dev/null 2>&1; then
    VERSION=$(get_version_package_json)
    echo "‚úÖ Current version: $VERSION"
    echo "   Patch bump: $VERSION ‚Üí $(calculate_new_version "$VERSION" "patch")"
    echo "   Minor bump: $VERSION ‚Üí $(calculate_new_version "$VERSION" "minor")"
    echo "   Major bump: $VERSION ‚Üí $(calculate_new_version "$VERSION" "major")"
    echo "   Hotfix bump: $VERSION ‚Üí $(calculate_new_version "$VERSION" "hotfix")"
else
    echo "‚ùå jq not found - cannot test version calculation"
fi
echo ""

echo "üéâ Release script functionality test completed!"
echo ""
echo "üìã Summary:"
echo "   - All required functions are available"
echo "   - Check any ‚ùå or ‚ö†Ô∏è  items above before running a release"
echo ""
echo "üöÄ Usage options:"
echo "   - Interactive: './bin/release.sh' (shows version bump menu)"
echo "   - Auto patch: './bin/release.sh patch'"
echo "   - Auto minor: './bin/release.sh minor'"
echo "   - Auto major: './bin/release.sh major'"
echo "   - Auto hotfix: './bin/release.sh hotfix'"
